//
//  AppDelegate.swift
//  RankingStar
//
//  Created by Jinesh on 13/12/19.
//  Copyright Â© 2019 Etech. All rights reserved.
//

import UIKit
import IQKeyboardManagerSwift
import GoogleSignIn
import FBSDKCoreKit
import FBSDKLoginKit
import FBSDKShareKit
import KakaoOpenSDK
import NaverThirdPartyLogin
import UserNotifications

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?
   // var backgroundTask: UIBackgroundTaskIdentifier = .invalid
    var token = ""
    var objRefreshUserDetailsDelegate : RefreshUserDetailsDelegate!
    var isPushViewOn = false

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        self.window = UIWindow(frame: UIScreen.main.bounds)
        
        UNUserNotificationCenter.current().delegate = self
        registerForPushNotification(application: application)
        
        IQKeyboardManager.sharedManager().enable = true
//        createMenuView()
        if(Util.getIsUserAutoLogin() == "0")
        {
            Util.removeAllDataOnLogout()
        }
        loadLoginVC()
        
        GIDSignIn.sharedInstance().clientID = Constant.GOOGL_CLIENT_ID
        ApplicationDelegate.shared.application(application, didFinishLaunchingWithOptions: launchOptions)
        let objNaver = NaverThirdPartyLoginConnection.getSharedInstance()
        objNaver?.isInAppOauthEnable = true
        objNaver?.isNaverAppOauthEnable = true
        objNaver?.setOnlyPortraitSupportInIphone(true)
        objNaver?.serviceUrlScheme = kServiceAppUrlScheme
        objNaver?.consumerKey = kConsumerKey
        objNaver?.consumerSecret = kConsumerSecret
        objNaver?.appName = kServiceAppName
        self.window?.makeKeyAndVisible()
        return true
    }

//    func  application(_ application: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool
//    {
//        GIDSignIn.sharedInstance().handle(url)
//        ApplicationDelegate.shared.application(application, open: url, sourceApplication: options[UIApplication.OpenURLOptionsKey.sourceApplication] as? String, annotation: options[UIApplication.OpenURLOptionsKey.annotation])
//        if KOSession.isKakaoAccountLoginCallback(url){
//            KOSession.handleOpen(url)
//        }
//        NaverThirdPartyLoginConnection.getSharedInstance()?.receiveAccessToken(url)
//        return true
//    }
    
    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
       // return
        GIDSignIn.sharedInstance().handle(url)
        if KOSession.isKakaoAccountLoginCallback(url){
           return KOSession.handleOpen(url)
        } // //fb467507857286658
        
        
        if(url.absoluteString.contains(Constant.NAVER_AUTH_TOKEN))
        {
            NaverThirdPartyLoginConnection.getSharedInstance()?.receiveAccessToken(url)
        }
        if(url.absoluteString.contains(Constant.FACEBOOK_AUTH_TOKEN) || url.absoluteString.contains("facebook"))
        {
            return ApplicationDelegate.shared.application(app, open: url, sourceApplication: options[UIApplication.OpenURLOptionsKey.sourceApplication] as? String, annotation: options[UIApplication.OpenURLOptionsKey.annotation])
        }
        return true
    }
    
    func applicationDidEnterBackground(_ application: UIApplication) {
    }
    
    func application(_ application: UIApplication, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void) {
        printDebug("handleEventsForBackgroundURLSession")
        completionHandler()
    }
    
    func applicationDidBecomeActive(_ application: UIApplication) {
        AppEvents.activateApp()
    }

//    var sideMenuNavVC : UINavigationController!
    func createMenuView() {

        let objMainVC = MainVC()
        let navMainVC  : UINavigationController = UINavigationController(rootViewController: objMainVC)
        navMainVC.navigationController?.isNavigationBarHidden = true
        navMainVC.isNavigationBarHidden = true

        let objSideMenuVC = SideMenuVC()
        Util.objMainVC = objMainVC
        Util.currentNavigationController = objMainVC.navigationController
        let navRightVC  : UINavigationController = UINavigationController(rootViewController: objSideMenuVC)
        navRightVC.navigationController?.isNavigationBarHidden = true
        navRightVC.isNavigationBarHidden = true

        let slideMenuController = ExSlideMenuController(mainViewController: navMainVC, leftMenuViewController: navRightVC)
      //  let slideMenuController = ExSlideMenuController(mainViewController: navMainVC, rightMenuViewController: navRightVC)
        slideMenuController.delegate = objMainVC
        slideMenuController.changeLeftViewWidth(UIScreen.main.bounds.width)
//        slideMenuController.changeRightViewWidth(UIScreen.main.bounds.width - 60)

        let sideMenuNavVC : UINavigationController = UINavigationController(rootViewController: slideMenuController)
        sideMenuNavVC.navigationBar.isHidden = true
        sideMenuNavVC.navigationController?.isNavigationBarHidden = true

        Util.slideMenuController = slideMenuController

        self.window?.rootViewController = sideMenuNavVC
    }
        
    func loadLoginVC() {
    
        let objLoginVC = SplaceScreenVC()
        
        let navVc : UINavigationController = UINavigationController(rootViewController: objLoginVC)
        navVc.navigationBar.isHidden = true
        navVc.navigationController?.isNavigationBarHidden = true
        
        self.window?.rootViewController = navVc
        self.window?.makeKeyAndVisible()
    }
}

func getNotificationSettings() {
    UNUserNotificationCenter.current().getNotificationSettings { settings in
        print("Notification settings: \(settings)")
        
        guard settings.authorizationStatus == .authorized else { return }
        DispatchQueue.main.async {
            UIApplication.shared.registerForRemoteNotifications()
        }
    }
}

func registerForPushNotification(application: UIApplication) {     //
    
    UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { (granted, error) in
        
        print("Permission granted: \(granted)")
        guard granted else { return }
        getNotificationSettings()
    }
}

extension AppDelegate : UNUserNotificationCenterDelegate
{
    //MARK:- UNUserNotificationCenterDelegate
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {

        let tokenParts = deviceToken.map { data -> String in
            return String(format: "%02.2hhx", data)
        }

        token = tokenParts.joined()
        print("Device Token: \(token)")

    }

    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        if error != nil {
            print("Device Register Failed :: >>>> \(error.localizedDescription)")
        }
    }
    func application(_ application: UIApplication, didRegister notificationSettings: UIUserNotificationSettings) {
        if notificationSettings.types.rawValue == 0 {
            print("Failed to register : ")
        }
        else {
            application.registerForRemoteNotifications()
        }
    }
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        
        // when app is in foreground
        
        let userInfo = notification.request.content.userInfo
        printDebug(userInfo)
        
        guard
            let customParam = userInfo[AnyHashable("customParam")] as? NSDictionary,
            let remainingStar = customParam["receiver_star"] as? String,
            
            let aps = userInfo[AnyHashable("aps")] as? NSDictionary,
            let alert = aps["alert"] as? String
            
            else {
                // handle any error here
                return
        }
        
        var dictData1:[String: Any]? = Util.getUserProfileDict()
        if(dictData1 != nil) {
            dictData1!["remaining_star"] = remainingStar
        }
        Util.setUserProfileDict(strValue: dictData1!)
        print("Alert: \(alert)")
        
        if objRefreshUserDetailsDelegate != nil {
            objRefreshUserDetailsDelegate.getUserStar()
        }
        
        completionHandler(UNNotificationPresentationOptions.alert)
    }

    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) {
        // when push notification display
        print("Recieve notificaton on foreground: \(userInfo)")
    }
    
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        // when tap on notification
        
<<<<<<< HEAD
        print("didReceiveRemoteNotification2: \(userInfo)")
        Util.objMainVC.pushViewControllerFromSideMenu(index: 5)
        
        guard
            let aps = userInfo[AnyHashable("aps")] as? NSDictionary,
//            let alert = aps["alert"] as? NSDictionary,
            let alert = aps["alert"] as? String
//            let body = alert["body"] as? String,
//            let title = alert["title"] as? String
            else {
                // handle any error here
                return
            }

        print("Title: \(alert)")
        
        if UIApplication.shared.applicationState == .active
        {
            Util.objMainVC.pushViewControllerFromSideMenu(index: 5)
//            print("Push notification On SCREEN")
        }
        else
        {
            createMenuView()
            Util.objMainVC.pushViewControllerFromSideMenu(index: 5)
//            print("Push notification On background")
=======
        print("Tap on notification: \(userInfo)")
        
//        let objPushNotificationListVC = PushNotificationListVC()
//
//        let navPushVC  : UINavigationController = UINavigationController(rootViewController: objPushNotificationListVC)
//        navPushVC.navigationController?.isNavigationBarHidden = true
//        navPushVC.isNavigationBarHidden = true
//        Util.currentNavigationController = navPushVC
//        Util.slideMenuController.changeMainViewController(navPushVC, close: true)
//        {
        
        if isPushViewOn == false {
            if UIApplication.shared.applicationState == .active
            {
                Util.objMainVC.pushViewControllerFromSideMenu(index: 5)
                //            print("Push notification On SCREEN")
            }
            else
            {
                createMenuView()
                Util.objMainVC.pushViewControllerFromSideMenu(index: 5)
                //            print("Push notification On background")
            }
>>>>>>> 98eda0d53cd97c381417400ca68d0e15c7f6b8ca
        }
    }
}


